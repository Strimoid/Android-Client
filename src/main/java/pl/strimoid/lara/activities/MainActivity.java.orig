package pl.strimoid.lara.activities;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.accounts.AccountManagerCallback;
import android.accounts.AccountManagerFuture;
import android.app.ActionBar;
import android.app.FragmentTransaction;
<<<<<<< Updated upstream
=======
import android.content.res.Configuration;
>>>>>>> Stashed changes
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.widget.ExpandableListView;

<<<<<<< Updated upstream
import com.koushikdutta.async.future.Cancellable;
import com.koushikdutta.async.http.AsyncHttpClientMiddleware;
=======
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.koushikdutta.async.future.FutureCallback;
>>>>>>> Stashed changes
import com.koushikdutta.ion.Ion;

<<<<<<< Updated upstream
=======
import java.util.ArrayList;
>>>>>>> Stashed changes
import java.util.Locale;

import pl.strimoid.lara.R;
import pl.strimoid.lara.Session;
import pl.strimoid.lara.Strimoid;
import pl.strimoid.lara.adapters.DrawerAdapter;
import pl.strimoid.lara.fragments.ContentListFragment;
import pl.strimoid.lara.fragments.EntryListFragment;
<<<<<<< Updated upstream
=======
import pl.strimoid.lara.gcm.Gcm;
import pl.strimoid.lara.listeners.GroupChange;
import pl.strimoid.lara.models.DrawerFolder;
import pl.strimoid.lara.models.DrawerGroup;
import pl.strimoid.lara.models.DrawerItem;
>>>>>>> Stashed changes
import pl.strimoid.lara.utils.OAuth2;

public class MainActivity extends FragmentActivity implements ActionBar.TabListener,
        ExpandableListView.OnGroupClickListener, ExpandableListView.OnChildClickListener {

    private AccountManager mAccountManager;
    private SectionsPagerAdapter mSectionsPagerAdapter;
    private ViewPager mViewPager;
    private OAuth2 mOAuth2;
<<<<<<< Updated upstream
=======
    private Gcm mGcm;
    private DrawerAdapter mDrawerAdapter;
    private DrawerLayout mDrawerLayout;
    private ExpandableListView mDrawerList;
    private ActionBarDrawerToggle mDrawerToggle;

>>>>>>> Stashed changes
    private boolean mLoggedIn = false;

    private boolean mTwoPane;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        requestWindowFeature(Window.FEATURE_PROGRESS);
        setContentView(R.layout.main_activity);

        //Ion.getDefault(getApplicationContext()).configure().proxy("192.168.1.3", 8888);

        final ActionBar actionBar = getActionBar();
        //actionBar.setTitle("");
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());

        mViewPager = (ViewPager) findViewById(R.id.pager);
        mViewPager.setAdapter(mSectionsPagerAdapter);

        mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
            @Override
            public void onPageSelected(int position) {
                actionBar.setSelectedNavigationItem(position);
            }
        });

        for (int i = 0; i < mSectionsPagerAdapter.getCount(); i++) {
            actionBar.addTab(
                    actionBar.newTab()
                            .setText(mSectionsPagerAdapter.getPageTitle(i))
                            .setTabListener(this));
        }

        if (savedInstanceState != null)
            restoreInstanceState(savedInstanceState);

        mAccountManager = AccountManager.get(this);
        Account accounts[] = mAccountManager.getAccountsByType("pl.strimoid");

        // Setup middleware to deal with OAuth2
        if (accounts.length == 1 && !mLoggedIn)
            setupOAuth2(accounts[0]);
<<<<<<< Updated upstream
=======

        // Setup GCM if device has GPS installed
        if (checkPlayServices())
            mGcm = new Gcm(getApplicationContext());
        else
            Log.i("Strimoid", "No valid Google Play Services APK found.");

        // Load user data
        if (mLoggedIn)
            loadUserData();

        // Register device registration id to get notifications
        if (mGcm != null && mLoggedIn)
            mGcm.sendRegistrationIdToBackend();

        // Setup left drawer menu
        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        mDrawerList = (ExpandableListView) findViewById(R.id.left_drawer);

        mDrawerList.setOnGroupClickListener(this);
        mDrawerList.setOnChildClickListener(this);

        mDrawerToggle = new ActionBarDrawerToggle(
                this,                  /* host Activity */
                mDrawerLayout,         /* DrawerLayout object */
                R.drawable.ic_drawer,  /* nav drawer icon to replace 'Up' caret */
                R.string.drawer_open,  /* "open drawer" description */
                R.string.drawer_close  /* "close drawer" description */
        );

        mDrawerLayout.setDrawerListener(mDrawerToggle);

        getActionBar().setDisplayHomeAsUpEnabled(true);
        getActionBar().setHomeButtonEnabled(true);

        setupDefaultDrawer();
    }

    private void loadUserData() {
        Ion.with(this, Strimoid.API_URL + "/me")
                .asJsonObject()
                .setCallback(new FutureCallback<JsonObject>() {
                    @Override
                    public void onCompleted(Exception e, JsonObject result) {
                        if (e != null)
                            return;

                        Session.getInstance().setUserData(result);

                        setupDrawer();
                    }
                });
    }

    private void setupDefaultDrawer()
    {
        ArrayList<DrawerFolder> foldersList = new ArrayList<DrawerFolder>();
        foldersList.add(new DrawerFolder("all", "Wszystkie"));

        mDrawerAdapter = new DrawerAdapter(this, foldersList);
        mDrawerList.setAdapter(mDrawerAdapter);
    }

    private void setupDrawer() {
        JsonObject userData = Session.getInstance().getUserData();

        ArrayList<DrawerFolder> foldersList = new ArrayList<DrawerFolder>();

        foldersList.add(new DrawerFolder("all", "Wszystkie"));
        foldersList.add(new DrawerFolder("subscribed", "Subskrybowane", userData.get("subscribed_groups")));
        foldersList.add(new DrawerFolder("moderated", "Moderowane", userData.get("moderated_groups")));
        foldersList.add(new DrawerFolder("observed", "Obserwowani"));
        foldersList.add(new DrawerFolder("saved", "Zapisane"));

        for (JsonElement object : userData.get("folders").getAsJsonArray()) {
            DrawerFolder folder = new Gson().fromJson(object, DrawerFolder.class);
            foldersList.add(folder);
        }

        mDrawerAdapter = new DrawerAdapter(this, foldersList);
        mDrawerList.setAdapter(mDrawerAdapter);
    }

    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
        mDrawerToggle.syncState();
    }

    @Override
    protected void onResume() {
        super.onResume();
        checkPlayServices();
>>>>>>> Stashed changes
    }

    private void restoreInstanceState(Bundle inState) {
        mLoggedIn = inState.getBoolean("logged_in", false);
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);

        outState.putBoolean("logged_in", mLoggedIn);
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        mDrawerToggle.onConfigurationChanged(newConfig);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);

        if (mLoggedIn) {
            menu.setGroupVisible(R.id.logged_in, true);
            menu.setGroupVisible(R.id.not_logged_in, false);
        }

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (mDrawerToggle.onOptionsItemSelected(item)) {
            return true;
        }

        switch (item.getItemId()) {
            case R.id.action_login:
                login();
                return true;
            case R.id.action_settings:
                return true;
        }

        return super.onOptionsItemSelected(item);
    }

    private void login() {
        final AccountManagerFuture<Bundle> future = mAccountManager.addAccount(
                "pl.strimoid", null, null, null, this, new AccountManagerCallback<Bundle>() {
            @Override
            public void run(AccountManagerFuture<Bundle> future) {
                try {
                    Bundle bundle = future.getResult();

                    if (bundle.containsKey(AccountManager.KEY_ACCOUNT_NAME)) {
                        Account accounts[] = mAccountManager.getAccountsByType("pl.strimoid");

                        setupOAuth2(accounts[0]);

                        loadUserData();

                        invalidateOptionsMenu();
                    }
                } catch (Exception e) { }
            }
        }, null);
    }

    @Override
    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
        mViewPager.setCurrentItem(tab.getPosition());

        View detail = findViewById(R.id.detail);

        // Toggle detail fragment visibility if in two pane mode
        //if (detail != null)
            //detail.setVisibility(tab.getPosition() == 2 ? View.GONE : View.VISIBLE);
    }

    @Override
    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }

    @Override
    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }

    @Override
    public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) {
        DrawerItem item = (DrawerItem) mDrawerAdapter.getGroup(groupPosition);

        GroupChange.getInstance().changeGroup(item);

        return false;
    }

    @Override
    public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) {
        String groupId = (String) v.getTag(R.id.TAG_ID);

        DrawerItem item = new DrawerGroup(groupId);

        GroupChange.getInstance().changeGroup(item);

        return false;
    }

    private void setupOAuth2(Account account) {
        OAuth2 oAuth2 = OAuth2.getInstance();
        oAuth2.useAccount(getApplicationContext(), account);

        Ion.getDefault(getApplicationContext()).getHttpClient().insertMiddleware(oAuth2);

        mLoggedIn = true;
    }

    public class SectionsPagerAdapter extends FragmentPagerAdapter {

        public SectionsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
            switch (position) {
                case 0:
                    return new ContentListFragment(ContentListFragment.TypeFilter.POPULAR);
                case 1:
                    return new ContentListFragment(ContentListFragment.TypeFilter.NEW);
                case 2:
                    return new EntryListFragment();
            }

            return null;
        }

        @Override
        public int getCount() {
            return 3;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            Locale l = Locale.getDefault();

            switch (position) {
                case 0:
                    return "Popularne".toUpperCase(l);
                case 1:
                    return "Nowe".toUpperCase(l);
                case 2:
                    return "Wpisy".toUpperCase(l);
            }

            return null;
        }
    }



}
